#!/usr/bin/env python3

import subprocess
import sys
import os
import traceback

# Définition des étapes
steps = [
    ("git clone https://github.com/tonrepo.git", "Clonage du dépôt"),
    ("git add .", "Ajout des fichiers"),
    ("git commit -m 'Automated commit'", "Commit"),
    ("git push", "Push vers le dépôt distant"),
]

STATE_FILE = "résumé.txt"
LOG_FILE = "log.txt"


def log_error(step_index, exception):
    with open(LOG_FILE, "a") as f:
        f.write(f"Erreur à l'étape {step_index + 1} : {steps[step_index][1]}\n")
        f.write(traceback.format_exc())
        f.write("\n---\n")


def load_state():
    if not os.path.exists(STATE_FILE):
        return []
    with open(STATE_FILE, "r") as f:
        return [int(line.strip()) for line in f.readlines() if line.strip().isdigit()]


def save_step_success(index):
    with open(STATE_FILE, "a") as f:
        f.write(f"{index}\n")


def execute_step(index):
    command, description = steps[index]
    print(f"> Étape {index + 1} : {description}")
    try:
        subprocess.run(command, shell=True, check=True)
        save_step_success(index)
        print(f"  Succès.")
    except Exception as e:
        print(f"  Échec : voir {LOG_FILE}")
        log_error(index, e)
        sys.exit(1)


def resume_from_last_failure():
    completed = load_state()
    for i in range(len(steps)):
        if i not in completed:
            for j in range(i, len(steps)):
                execute_step(j)
            break
    else:
        print("Toutes les étapes ont déjà été exécutées.")


def parse_range(arg):
    if "-" in arg:
        start, end = map(int, arg.split("-"))
        return list(range(start - 1, end))
    else:
        return [int(arg) - 1]


def main():
    if len(sys.argv) != 2:
        print("Utilisation : ./script.py [étape|début-fin|--resume]")
        sys.exit(1)

    arg = sys.argv[1]
    if arg == "--resume":
        resume_from_last_failure()
    else:
        try:
            indices = parse_range(arg)
            for i in indices:
                if i < 0 or i >= len(steps):
                    print(f"Étape invalide : {i + 1}")
                    continue
                if i in load_state():
                    print(f"Étape {i + 1} déjà faite, sautée.")
                    continue
                execute_step(i)
        except ValueError:
            print("Argument invalide. Fournir un nombre, une plage (ex: 1-3), ou --resume.")
            sys.exit(1)


if __name__ == "__main__":
    main()

